/************************************************************************ Processes files as series ************************************************************************ IN: Files: <nn><a|b|c>.jpg nn = number of the serie (01, 02, ...) a|b|c = file position in the serie (from 1 to 3 element by serie) OUT: Files: serie_<nn>.jpg (1 file by serie) PROCESS: Count series. For each serie, each file is resized and copyed in a layer. Depending how much files there is in the serie, layer are postioned. Save file for web. ************************************************************************ In this script you can learn about: - user input with prompt - move a layer - copy file into another file - update preferences - export to web and more... ************************************************************************ Thanks to Habaki from forum.photoshop-school.org for his help (02/02/2012). ************************************************************************/// Settingsvar baseResizeHeight = 455, // height resize    baseCropWidth    = 300, // width crop    baseCropHeight   = 455, // height crop    docWidth         = 640, // output file's width    docHeight        = 960, // output file's height    docResol         = 300, // output file's resolution (dpi)    outPath          = "D:/my_series", // default folder    inputExtension   = "png"; // input file's extensions// change unit config to pxvar unitSaved = preferences.rulerUnits;preferences.rulerUnits = Units.PIXELS;// hide dialogsapp.displayDialogs = DialogModes.NO;/** * Move a layer to defined coordinates * @param {string} layerName layer name * @param {int} posX new X position * @param {int} posY new Y position */function moveLayer(layerName, posX, posY) {    app.activeDocument.layers[layerName].translate(posX,posY);}/** * Copy file in a new oupt file's layer * @param {string} docMain Document name * @param {string} layerName layer name * @param {string} sourceFile source file * @return {obj} layer */function layerFromFile(docMain, layerName, sourceFile) {  var Layer, Doc, selection;  // open, resize, crop and copy image  file = open(sourceFile);  file.resizeImage(null,baseResizeHeight,null,null); // resize input file  file.resizeCanvas(baseCropWidth,baseCropHeight,null); // crop input file  selection = file.selection;  selection.selectAll();  selection.copy();  file.close(SaveOptions.DONOTSAVECHANGES);  // paste image to the output file  Layer = docMain.paste();  Layer.name = layerName;  return(Layer);}/** * Export output file * @param {string} name the output file name */function saveForWebJPG(name) {  var opts = new ExportOptionsSaveForWeb();  opts.format = SaveDocumentType.JPEG;  opts.quality = 100;  activeDocument.exportDocument(name, ExportType.SAVEFORWEB, opts);}// main processtry {  var docMain, Doc;  var Serie, SerieName, inputFiles, SerieMin, SerieMax;  var F, FA, FB, FC;  var MainDir = File(prompt("Specify the source folder: \nImages will be resized and croped to " + baseCropWidth + "x" + baseCropHeight, outPath));  // count series  inputFiles = MainDir.getFiles("*." + inputExtension);  SerieMin = 99;  SerieMax = 0;  // set first and last series  for (i=0; i < inputFiles.length; i++) {    // parseInt will ignore the a|b|c    currentSerie = parseInt(inputFiles[i].name, 10);    if (SerieMin > currentSerie) SerieMin = currentSerie;    if (SerieMax < currentSerie) SerieMax = currentSerie;  }  alert(SerieMax + " series found");  // process series  for (Serie=SerieMin; Serie <= SerieMax; Serie++) {    SerieName = String(Serie);    SerieName = "00".slice(0,-SerieName.length) + SerieName;    F = File(MainDir + "/serie_" + SerieName + ".jpg");    if (F.exists) {      // serie already done      alert("Serie already done: " +  SerieName);      continue;    }    // load image A    FA = File(MainDir + "/" + SerieName + "a." + inputExtension);    if (FA.exists) {      // serie exists      // create output file      docMain = documents.add(docHeight, docWidth, docResol, SerieName, NewDocumentMode.RGB, DocumentFill.BACKGROUNDCOLOR);      layerFromFile(docMain, "A", FA);      // load image B      FB = File(MainDir + "/" + SerieName + "b." + inputExtension);      if (FB.exists) {        layerFromFile(docMain, "B", FB);        // load image C        FC = File(MainDir + "/" + SerieName + "c." + inputExtension);        if (FC.exists) {          // 3 elements          // load image C          layerFromFile(docMain, "C", FC);          moveLayer("A", -311, 0);          moveLayer("B", 0, 0);          moveLayer("C", 311, 0);        } else {          // 2 elements          moveLayer("A", -155, 0);          moveLayer("B", 156, 0);        } // if FC      } else {        // 1 element        moveLayer("A", 0, 0);      } // if FB      // export and close document      saveForWebJPG(F);      docMain.close(SaveOptions.DONOTSAVECHANGES);    } // if FA  }  // restore unit config  preferences.rulerUnits = unitSaved;alert("Finito :D");} catch(exception) {  alert(exception.message)}